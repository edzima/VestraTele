<?php

namespace common\tests\unit\lead;

use common\modules\lead\components\LeadManager;
use common\modules\lead\models\Lead;
use common\modules\lead\models\LeadEntity;
use common\modules\lead\models\LeadInterface;
use common\tests\unit\Unit;
use yii\helpers\Json;

class LeadComponentTest extends Unit {

	private LeadManager $leadManager;
	private LeadInterface $lead;
	private ?array $leadData;

	private bool $pushed = false;

	public function _before() {
		$this->givenLeadComponent();
		parent::_before(); // TODO: Change the autogenerated stub
	}

	private function givenLead(): void {
		$this->lead = new LeadEntity($this->leadData);
	}

	private function givenLeadComponent(): void {
		$this->leadManager = new LeadManager(['model' => Lead::class]);
	}

	public function testPush(): void {
		$this->leadData = [LeadEntity::SOURCE_DATA_ATTRIBUTE => $this->getName(), 'customer' => 'John Miller'];
		$this->givenLead();

		$this->whenPush();

		$this->thenSuccessPush();
		$this->thenSeeLead();
	}

	public function testDoublePushSameLead(): void {
		$this->leadData = [LeadEntity::SOURCE_DATA_ATTRIBUTE => $this->getName(), 'customer' => 'John Miller'];
		$this->givenLead();

		$this->whenPush();
		$this->thenSeeLead();

		$this->whenPush();
		$this->thenUnsuccessPush();
	}

	private function thenSuccessPush(): void {
		$this->tester->assertTrue($this->pushed);
	}

	private function thenUnsuccessPush(): void {
		$this->tester->assertFalse($this->pushed);
	}

	private function thenSeeLead(): void {
		$this->tester->seeRecord($this->leadManager->model, ['data' => Json::encode($this->leadData)]);
	}

	private function whenPush(): void {
		$this->pushed = $this->leadManager->pushLead($this->lead);
	}
}
