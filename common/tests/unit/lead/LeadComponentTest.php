<?php

namespace common\tests\unit\lead;

use common\fixtures\helpers\LeadFixtureHelper;
use common\modules\lead\components\LeadManager;
use common\modules\lead\models\ActiveLead;
use common\modules\lead\models\Lead;
use common\modules\lead\models\LeadInterface;
use common\tests\helpers\LeadFactory;
use common\tests\unit\Unit;

class LeadComponentTest extends Unit {

	protected const LEAD_MODEL = Lead::class;

	private LeadManager $leadManager;
	private LeadInterface $lead;

	private ?ActiveLead $pushed = null;

	public function _before() {
		$this->givenLeadComponent();
		parent::_before(); // TODO: Change the autogenerated stub
	}

	public function _fixtures(): array {
		return LeadFixtureHelper::leads();
	}

	private function givenLeadComponent(): void {
		$this->leadManager = new LeadManager([
			'model' => static::LEAD_MODEL,
		]);
	}

	public function testPushEmpty(): void {
		$this->giveLead([]);

		$this->whenPush();

		$this->thenUnsuccessPush();
	}

	public function testPush(): void {
		$this->giveLead([
			'type_id' => 1,
			'source_id' => 1,
			'status_id' => 1,
			'phone' => '789-185-145',
		]);

		$this->whenPush();
		$this->thenSuccessPush();
		$this->thenSeeLead();
	}

	public function testDoubleSamePush(): void {

		$this->giveLead([
			'type_id' => 1,
			'source_id' => 1,
			'status_id' => 1,
			'phone' => '789-185-145',
		]);

		$this->whenPush();
		$first = $this->pushed;
		$this->thenSuccessPush();
		$this->whenPush();
		$this->thenSuccessPush();
		$second = $this->pushed;
		$this->tester->assertNotSame($first->getId(), $second->getId());
	}

	protected function giveLead(array $data): void {
		$this->lead = LeadFactory::createLead($data);
	}

	private function whenPush(): void {
		$this->pushed = $this->leadManager->pushLead($this->lead);
	}

	private function thenSuccessPush(): void {
		$this->tester->assertNotNull($this->pushed);
		$this->tester->assertNotNull($this->leadManager->findById($this->pushed->getId()));
	}

	private function thenUnsuccessPush(): void {
		$this->tester->assertNull($this->pushed);
	}

	private function thenSeeLead(): void {
		$this->tester->assertNotEmpty($this->leadManager->findByLead($this->lead));
	}

}
